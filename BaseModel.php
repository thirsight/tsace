<?phpnamespace ts\base;use Yii;use yii\db\Query;use yii\base\Model;use yii\web\HttpException;defined('HTTP_STATUS_422') or define('HTTP_STATUS_422', '422');/** * This is the base model. * * @author Haisen <thirsight@gmail.com> * @since 1.0 */class BaseModel extends \yii\db\ActiveRecord{    /**     * 为 created_at updated_at 字段自动赋值     *     * @return array     */    public function behaviors()    {        return [            \yii\behaviors\TimestampBehavior::className(),        ];    }    /**     * 无前缀表名     *     * @return string     */    public static function rawTableName()    {        $name = self::tableName();        if (strpos($name, '{{') !== false) {            return preg_replace('/\\{\\{%(.*?)\\}\\}/', '\1', $name);        } else {            return $name;        }    }    /**     * 分表，获取表后缀     *     * @param $param     * @return string     */    public static function tableAutoSuffix($param)    {        if (!isset(Yii::$app->params[$param]) ||            !is_numeric(Yii::$app->params[$param]) ||            Yii::$app->params[$param] == 0) {            return '';        }        if (isset(Yii::$app->user->id_md5) && Yii::$app->user->id_md5) {            $idMd5 = Yii::$app->user->id_md5;        } elseif (Yii::$app->user->id) {            $idMd5 = md5(Yii::$app->user->id);        } else {            $idMd5 = 'cfcd208495d565ef66e7dff9f98764da'; /* md5('0') */        }        $idMd5 = preg_replace('#\D#', '', $idMd5);        $idMd5 = substr($idMd5, 0, Yii::$app->params[$param]);        return '_' . $idMd5;    }    /**     * 根据提供的 $ids 顺序自动排序     * $ids 可以为数组或半角逗号分隔的字符串     *     * @param $attributeId     * @param $attributeSort     * @param $ids Array|String     * @return int|null     */    public static function updateAutoSort($attributeId, $attributeSort, $ids)    {        if (is_string($ids) && strstr($ids, ',')) {            $ids = explode(',', $ids);        }        if (!empty($ids) && is_array($ids)) {            $sql = '';            $params = [];            foreach ($ids as $sort => $id) {                $sort++;                $sql .= "UPDATE " . static::tableName() . " SET `{$attributeSort}` = :sort{$sort} WHERE `{$attributeId}` = :id{$sort};\n";                $params[":sort{$sort}"] = $sort;                $params[":id{$sort}"] = $id;            }            return static::getDb()->createCommand($sql, $params)->execute();        }        return null;    }    // ------------------------------------------------------------------------    /**     * @param mixed $condition     * @param null $orderBy     * @param array $params     * @return array|null|\yii\db\ActiveRecord     */    public static function findLatest($condition, $orderBy = null, $params =[])    {        return static::find()            ->where($condition, $params)            ->orderBy($orderBy)            ->one();    }    // ------------------------------------------------------------------------    /**     * @return Query     */    public static function qFind()    {        return (new Query())            ->select('*')            ->from(static::tableName());    }    /**     * @param $condition     * @param null $orderBy     * @param array $params     * @return array|bool     */    public static function qFindOne($condition, $orderBy = null, $params =[])    {        return static::qFind()            ->where($condition, $params)            ->orderBy($orderBy)            ->one();    }    /**     * @param $condition     * @param null $orderBy     * @param array $params     * @return array     */    public static function qFindAll($condition, $orderBy = null, $params =[])    {        return static::qFind()            ->where($condition, $params)            ->orderBy($orderBy)            ->all();    }    /**     * 字段过滤     * @param array $model     * @param array $fields     */    public static function qFieldsFilter(Array &$model = null, Array $fields = null)    {        if ($model && $fields) {            foreach ($model as $field => $value) {                if (!in_array($field, $fields)) {                    unset($model[$field]);                }            }        }    }    // ------------------------------------------------------------------------    /**     * 输出格式化     * @param $model     */    public static function inputBy(&$model)    {        if ($model instanceof Model || is_array($model)) {            foreach ($model as $field => $value) {                if (is_array($value)) {                    $model[$field] = serialize($value);                }            }        }    }    /**     * 输出格式化     * @param $model     */    public static function outputBy(&$model)    {        if ($model instanceof Model || is_array($model)) {            foreach ($model as $field => $value) {                if (is_numeric($value)) {                    $model[$field] = trim($value, '0.');                }                if (TsStringHelper::isSerialized($value)) {                    $model[$field] = unserialize($value);                }            }        }    }    // ------------------------------------------------------------------------    /**     * @param array $array     * @return array     */    public static function compactVerbose(Array $array)    {        return ['verbose' => $array];    }    /**     * @param $array     * @return bool     */    public static function isVerbose(&$array)    {        return is_array($array) && count($array) === 1 && isset($array['verbose']);    }    /**     * @param array $verbose     */    public static function pushExceptionVerbose(Array $verbose)    {        if (!static::isVerbose($verbose)) {            $verbose = static::compactVerbose($verbose);        }        Yii::$app->response->on(\yii\web\Response::EVENT_BEFORE_SEND, function ($event) {            if (is_array($event->sender->data) &&                isset($event->sender->data['status'])) {                $event->sender->data += $event->data;            }        }, $verbose);    }    /**     * @param $model     * @return bool     * @throws \yii\web\HttpException     */    public static function throwVerbose422(&$model)    {        if ($model instanceof Model && $model->hasErrors()) {            static::pushExceptionVerbose($model->firstErrors);            throw new HttpException(HTTP_STATUS_422, Yii::t('pb', 'Data validate failed.'));        }        return false;    }}