<?phpnamespace ts\base\widgets;use Yii;use yii\base\InvalidConfigException;use yii\web\View;use yii\helpers\Html;/** * 可快速编辑字段内容的明细视图 * * @author Haisen <thirsight@gmail.com> * @since 1.0 */class EditableView extends \yii\widgets\DetailView{    /**     * 继承自 DetailView     * @var string|callable     */    public $template = '<tr><th class="col-sm-2 active text-nowrap">{label}</th><td{tdAttribute}>{value}</td></tr>';    /**     * 继承自 DetailView     * @var array     */    public $options = ['class' => 'table table-bordered table-hover detail-view'];    /**     * @var string     */    public $updateUrl;    /**     * 设定可编辑的字段     * @var array     */    public $editableAttributes;    /**     * Initializes the editable detail view.     * This method will initialize required property values.     */    public function init()    {        parent::init();        if (!empty($this->editableAttributes) && !is_array($this->editableAttributes)) {            throw new InvalidConfigException('The "editableAttributes" property must be an array.');        }    }    /**     * Renders the detail view.     * This is the main entry of the whole detail view rendering.     */    public function run()    {        parent::run();        $this->registerJs();    }    /**     * 继承自 DetailView     * Renders a single attribute.     * @param array $attribute the specification of the attribute to be rendered.     * @param integer $index the zero-based index of the attribute in the [[attributes]] array     * @return string the rendering result     */    protected function renderAttribute($attribute, $index)    {        if (is_string($this->template)) {            $tdAttribute = '';            if (in_array($attribute['attribute'], $this->editableAttributes)) {                $tdAttribute = Html::renderTagAttributes([                    'class' => 'ts-editable',                    'data' => ['url' => $this->updateUrl, 'label' => $attribute['label'], 'attribute' => $attribute['attribute']],                ]);            }            return strtr($this->template, [                '{label}' => $attribute['label'],                '{tdAttribute}' => $tdAttribute,                '{value}' => $this->formatter->format($attribute['value'], $attribute['format']),            ]);        } else {            return call_user_func($this->template, $attribute, $index, $this);        }    }    /**     * Register js for editable view.     */    protected function registerJs()    {        $js = <<<EOD(function($) {    $("td.ts-editable").hover(function() {        $(this).append(' <a href="###" class="ts-editable-btn"><i class="fa fa-edit"></i></a>');    }, function() {        $(this).find("a.ts-editable-btn").remove();    }).delegate("a.ts-editable-btn", "click", function() {        var td = $(this).parent();        bootbox.prompt({            title: "Edit: " + td.data("label"),            value: $.trim(td.text()),            buttons: {                confirm: {label: "Submit"}            },            callback: function(result) {                if (result !== null) {                    $.post(td.data("url"), {attribute: td.data("attribute"), value: result}, function(data){                        if (data == 1 ) {                            td.html(result);                        } else {                            alert(data);                        }                    });                }            }        });    });})(jQuery);EOD;        $this->view->registerJs($js, View::POS_READY, __METHOD__);        $this->view->registerAssetBundle('ts\ace\BootboxAsset');    }}